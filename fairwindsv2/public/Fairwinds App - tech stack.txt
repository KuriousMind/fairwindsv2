# Fairwinds RV Maintenance App - Technical Stack

## Technology Stack

### Frontend
- Next.js 14 (PWA-capable, SSR, file-system routing)
- React Built-in State Management (useState, useContext)
- React Hook Form
- TailwindCSS
- IndexedDB & Service Workers (offline capability)
- Canvas API for client-side image processing

## Technical Specifications

### Photo Management
- Client-side compression using Canvas API:
  * Auto-resize to max 1920px dimension (maintaining aspect ratio)
  * JPEG compression (quality: 0.8)
  * Native browser APIs only, no additional dependencies
- Storage optimization:
  * Maximum 12 photos per RV
  * Compressed photos stored in S3
  * Thumbnails cached in IndexedDB for offline viewing

### Offline Capabilities
- IndexedDB storage quota: 50MB
  * Maintenance events data (~1MB)
  * Thumbnail versions of latest photos (~3MB)
  * Remaining space for future features
- Offline viewing only:
  * Upcoming maintenance events
  * Basic RV information
  * Cached thumbnails
- No offline editing in Phase 1

### Authentication Implementation
- Phase 1 (Basic):
  * Email/password authentication only
  * No password complexity requirements
  * 24-hour session duration
  * Basic JWT token handling

### Backend (AWS)
- Cognito: Authentication (50k MAU free tier)
- DynamoDB: Database (25GB free tier)
- S3: Storage (5GB free tier)
- AppSync: GraphQL API (250k queries free tier)
- Amplify Hosting: Deployment & CDN (~$5-10/month)

## Implementation Phases

### Authentication Strategy
- Cognito User Pools for authentication management
- JWT token handling with secure storage
- Session management with auto-refresh
- Initial session timeout: 24 hours

### State Management Strategy
- Component-level state with useState
- Application-wide state with useContext
- Authentication state via Amplify Auth
- Offline state sync with IndexedDB
- Form state handled by React Hook Form

### Phase 1: Core RV Profile & Auth
- RV profile creation and management
  * Single RV per user account
  * Auto-complete make/model selection
  * Required/optional field validation
- Basic maintenance record tracking
- Photo upload and storage
  * 12 photo limit per RV
  * Client-side compression
  * Thumbnail generation
- Offline access implementation
  * View-only access to maintenance events
  * 50MB IndexedDB quota
- Email-based authentication
  * Sign up with email verification
  * Login with email/password
  * Password reset flow
  * Basic session management (24h duration)

### Phase 2: Enhanced Features
- Document management system
- Maintenance scheduling
- Custom maintenance intervals
- Data export capabilities
- Enhanced authentication
  * Phone number authentication
  * SMS verification codes
  * Multiple auth method support
  * Improved session handling

### Phase 3: Community Features
- Maintenance tips sharing
- Parts lookup with Amazon affiliate integration
- Service manual repository
- Advanced security features
  * Enhanced password policies
    - Minimum 12 characters
    - Special character requirements
    - Password history enforcement
  * Secure credential storage
  * MFA implementation
  * Biometric authentication option
  * Advanced session controls

## Data Models

```graphql
type User @model {
  id: ID!
  email: String!
  rv: RV @hasOne
}

type RV @model {
  id: ID!
  make: String!
  model: String!
  year: Int!
  photos: [String]
  documents: [Document] @hasMany
  maintenanceRecords: [MaintenanceRecord] @hasMany
}

type MaintenanceRecord @model {
  id: ID!
  title: String!
  date: AWSDateTime!
  type: String!
  notes: String
  photos: [String]
  documents: [Document] @hasMany
}

type Document @model {
  id: ID!
  title: String!
  type: String!
  url: String!
  tags: [String]
}
```

## Development Guidelines

### Setup
```bash
npm create next-app@latest fairwinds --typescript --tailwind --app
npm install @aws-amplify/ui-react aws-amplify react-hook-form
amplify init && amplify add auth && amplify add api && amplify add storage
```

### Mobile-First Implementation
- PWA configuration with offline sync
- Card-based navigation layout
  * NavBar component for consistent button layout
  * NavButton component for standardized interactions
  * Maximum three buttons per card
  * Back navigation integrated in NavBar
- Full-screen forms for data entry
- Grid/list layouts for galleries and records
- Efficient battery usage and data sync

### Development & Deployment Strategy
- Environment Variables:
  * Managed automatically through AWS Amplify Console
  * Required variables:
    - Cognito User Pool settings
    - S3 bucket configuration
    - AppSync API endpoint
    - DynamoDB table names
- Deployment:
  * Automatic deployments with git push
  * Built-in SSL certificate management
  * CDN distribution through Amplify
  * Branch-based deployments available
- Error Handling:
  * Automatic error handling through AppSync
  * Built-in error types:
    - Unauthorized
    - ValidationError
    - ConditionalCheckFailedException
  * Handled by Amplify client libraries
- Testing Strategy (Phase 1):
  * Manual testing approach
  * Focus areas:
    - Auth flows
    - RV profile creation
    - Photo upload (12 photo limit)
    - Basic maintenance tracking
  * Automated testing framework deferred to Phase 3

### UI Theme Colors
- Primary: #2B6CB0 (Blue) - primary actions, navigation
- Accent: #E76F51 (Orange) - emphasis, CTAs
- Secondary: #2A9D8F (Teal) - success states
- Warning: #FFB938 (Yellow) - icons, accents
- Text: #1D3557 (Navy) - body text
- Heading: #8B4513 (Brown) - headers
- Background: #F5E6D3 (Warm background)
- White: #FFFFFF

### Testing & Deployment
- Unit testing: Jest + React Testing Library
- Mobile and offline capability testing
- Deployment via AWS Amplify
- PWA validation and mobile testing

## Infrastructure & Costs

### Monthly Estimates
- Amplify Hosting: ~$5-10
- Storage (S3): ~$1-2
- DynamoDB, AppSync, Cognito: Free tier
Total: ~$15/month

### Cost Management
- Monitor AWS usage dashboards
- Implement storage quotas
- Optimize data queries and sync

## Future Roadmap
- Enhanced offline capabilities
- Community marketplace
- Service provider integration

Last Updated: January 25, 2025
